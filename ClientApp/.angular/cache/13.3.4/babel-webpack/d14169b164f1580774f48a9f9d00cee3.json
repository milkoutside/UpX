{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\alice\\\\Desktop\\\\UpGames\\\\Upx\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/common/http\";\nexport class AuthGuard {\n  constructor(router, jwtHelper, http) {\n    this.router = router;\n    this.jwtHelper = jwtHelper;\n    this.http = http;\n  }\n\n  canActivate(route, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem(\"jwt\");\n\n      if (token && _this.jwtHelper.isTokenExpired(token)) {}\n\n      const isRefreshSuccess = yield _this.tryRefreshingTokens(token);\n\n      if (!isRefreshSuccess) {\n        localStorage.removeItem(\"jwt\");\n        localStorage.removeItem(\"refreshToken\");\n        return isRefreshSuccess;\n      }\n\n      return true;\n    })();\n  }\n\n  tryRefreshingTokens(token) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Try refreshing tokens using refresh token\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n\n      if (!token || !refreshToken) {\n        return false;\n      }\n\n      if (refreshToken && _this2.jwtHelper.isTokenExpired(refreshToken)) {\n        return false;\n      }\n\n      const credentials = JSON.stringify({\n        accessToken: token,\n        refreshToken: refreshToken\n      });\n      let isRefreshSuccess;\n      const refreshRes = yield new Promise((resolve, reject) => {\n        _this2.http.post(\"https://localhost:7006/api/token/refresh\", credentials, {\n          headers: new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n          })\n        }).subscribe({\n          next: res => resolve(res),\n          error: _ => {\n            reject;\n            isRefreshSuccess = false;\n          }\n        });\n      });\n      localStorage.setItem(\"jwt\", refreshRes.token);\n      localStorage.setItem(\"refreshToken\", refreshRes.refreshToken);\n      isRefreshSuccess = true;\n      return isRefreshSuccess;\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.HttpClient));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/alice/Desktop/UpGames/Upx/ClientApp/src/app/guards/auth.guard.ts"],"names":["HttpHeaders","i0","i1","i2","i3","AuthGuard","constructor","router","jwtHelper","http","canActivate","route","state","token","localStorage","getItem","isTokenExpired","isRefreshSuccess","tryRefreshingTokens","removeItem","refreshToken","credentials","JSON","stringify","accessToken","refreshRes","Promise","resolve","reject","post","headers","subscribe","next","res","error","_","setItem","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","JwtHelperService","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"@auth0/angular-jwt\";\r\nimport * as i3 from \"@angular/common/http\";\r\nexport class AuthGuard {\r\n    constructor(router, jwtHelper, http) {\r\n        this.router = router;\r\n        this.jwtHelper = jwtHelper;\r\n        this.http = http;\r\n    }\r\n    async canActivate(route, state) {\r\n        const token = localStorage.getItem(\"jwt\");\r\n        if (token && this.jwtHelper.isTokenExpired(token)) {\r\n        }\r\n        const isRefreshSuccess = await this.tryRefreshingTokens(token);\r\n        if (!isRefreshSuccess) {\r\n            localStorage.removeItem(\"jwt\");\r\n            localStorage.removeItem(\"refreshToken\");\r\n            return isRefreshSuccess;\r\n        }\r\n        return true;\r\n    }\r\n    async tryRefreshingTokens(token) {\r\n        // Try refreshing tokens using refresh token\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        if (!token || !refreshToken) {\r\n            return false;\r\n        }\r\n        if (refreshToken && this.jwtHelper.isTokenExpired(refreshToken)) {\r\n            return false;\r\n        }\r\n        const credentials = JSON.stringify({ accessToken: token, refreshToken: refreshToken });\r\n        let isRefreshSuccess;\r\n        const refreshRes = await new Promise((resolve, reject) => {\r\n            this.http.post(\"https://localhost:7006/api/token/refresh\", credentials, {\r\n                headers: new HttpHeaders({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            }).subscribe({\r\n                next: (res) => resolve(res),\r\n                error: (_) => { reject; isRefreshSuccess = false; }\r\n            });\r\n        });\r\n        localStorage.setItem(\"jwt\", refreshRes.token);\r\n        localStorage.setItem(\"refreshToken\", refreshRes.refreshToken);\r\n        isRefreshSuccess = true;\r\n        return isRefreshSuccess;\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.HttpClient)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}